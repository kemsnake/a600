<?php

/**
 * @file
 * This module holds functions for a600 project
 */

/**
 * Implements hook_menu().
 */
function custom_a600_menu() {
  $items['admin/config/a600/settings'] = array(
    'title' => 'A600 search settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_a600_project_settings'),
    'access arguments' => array('administer site configuration'),
  );

  $items['order/%'] = array(
    'title' => 'Купить проект',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_a600_project_order_form', 1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['project-search'] = array(
    'title' => 'Project search',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_a600_project_search'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['house_projects/search/%'] = array(
    'title' => 'Project search',
    'page callback' => '_custom_a600_search_projects_append_ajax',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function custom_a600_project_settings($form, &$form_state) {

  $form['custom_a600_square_options'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('custom_a600_square_options', ''),
    '#title' => 'Опции для площади домов',
  );
  $form['custom_a600_count_bedroom_options'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('custom_a600_count_bedroom_options', ''),
    '#title' => 'Опции для кол-ва спален',
  );
  $form['custom_a600_site_phone'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('custom_a600_site_phone', ''),
    '#title' => 'Телефон отображаемый вверху сайта',
  );
  $form['custom_a600_item_price'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('custom_a600_item_price', 500),
    '#title' => 'Цена каждого дополнительного экземпляра документации',
  );

  $form['standard_price'] = array(
    '#type' => 'fieldset',
    '#title' => 'Параметры стандартной цены',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['standard_price']['custom_a600_standard_price_description'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('custom_a600_standard_price_description', ''),
    '#title' => 'Описание стандартного пакета документов',
  );
  $form['standard_price']['custom_a600_standard_price_options'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('custom_a600_standard_price_options', ''),
    '#description' => 'Введите несколько значений разделенных запятыи',
    '#title' => 'Состав пакета',
  );
  $form['standard_price']['custom_a600_standard_price_additional'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('custom_a600_standard_price_additional', ''),
    '#description' => 'Введите несколько значений разделенных запятыи',
    '#title' => 'Дополнительный состав пакета',
  );

  $form['full_price'] = array(
    '#type' => 'fieldset',
    '#title' => 'Параметры полной цены',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['full_price']['custom_a600_full_price_enabled'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('custom_a600_full_price_enabled', FALSE),
    '#title' => 'Включено',
  );
  $form['full_price']['custom_a600_full_price_description'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('custom_a600_full_price_description', ''),
    '#title' => 'Описание полного пакета документов',
  );
  $form['full_price']['custom_a600_full_price_options'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('custom_a600_full_price_options', ''),
    '#description' => 'Введите несколько значений разделенных запятыи',
    '#title' => 'Состав пакета',
  );
  $form['full_price']['custom_a600_full_price_additional'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('custom_a600_full_price_additional', ''),
    '#description' => 'Введите несколько значений разделенных запятыи',
    '#title' => 'Дополнительный состав пакета',
  );

  $form['extended_price'] = array(
    '#type' => 'fieldset',
    '#title' => 'Параметры расширенной цены',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['extended_price']['custom_a600_extended_price_enabled'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('custom_a600_extended_price_enabled', FALSE),
    '#title' => 'Включено',
  );
  $form['extended_price']['custom_a600_extended_price_description'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('custom_a600_extended_price_description', ''),
    '#title' => 'Описание расширенного пакета документов',
  );
  $form['extended_price']['custom_a600_extended_price_options'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('custom_a600_extended_price_options', ''),
    '#description' => 'Введите несколько значений разделенных запятыи',
    '#title' => 'Состав пакета',
  );
  $form['extended_price']['custom_a600_extended_price_additional'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('custom_a600_extended_price_additional', ''),
    '#description' => 'Введите несколько значений разделенных запятыи',
    '#title' => 'Дополнительный состав пакета',
  );

  return system_settings_form($form);
}

/**
 * Implements hook_block_info().
 */
function custom_a600_block_info() {
  $blocks['site_top_phone'] = array(
    'info' => t('Телефон сайта(шапка)'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['favorites_projects'] = array(
    'info' => t('Избранные проекты'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function custom_a600_block_view($delta) {
  $block = array();
  switch ($delta) {
    case 'site_top_phone':
      $number = variable_get('custom_a600_site_phone', '');
      $block['content'] = '<div class="top-phone-title">Звоните:</div><div class="top-phone-number">'. $number . '</div>';
      break;
    case 'favorites_projects':
      $block['content'] = '<div id="favorites-list">' . favorites_list() . '</div>';
      break;
  }
  return $block;
}

function custom_a600_project_search($form, &$form_state) {
  $form = array();
  drupal_set_title('');
  if (!isset($form_state['vales'])) {
    $default_params = array(
      'square' => '100-200',
      'width' => array('value' => 10, 'value2' => 15),
      'length' => array('value' => 10, 'value2' => 15),
      //'count_bedroom' => 'all',
      'all_dimensions' => TRUE,
      'garage' => 'all',
      'floor' => '7',
      'attic_floor' => FALSE,
      'house_basement' => FALSE,
      'price_slider' => array('value' => 10000, 'value2' => 150000),
      'second_light' => 'all',
      'balcony' => 'all',
      'terrace' => 'all',
      'erker' => 'all',
      'count_bedroom_floor1' => 'all',
      'count_bedroom_floor2' => 'all',
      'pool' => 'all',
      'page' => 0,
      'count_search' => 0,
      'count_projects' => FALSE,
    );
  }
  else {
    $default_params = $form_state['values'];
  }

  $form['filters'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
  );

  $form['filters']['description'] = array(
    '#markup' => '<div class="filters-title">Какой он - дом мечты?</div>',
  );

  $ajax = array(
    'callback' => '_custom_a600_search_projects_ajax',
    'wrapper' => 'results-wrapper',
    'method' => 'replace',
    'effect' => 'fade',
  );

  $options = explode(',', variable_get('custom_a600_square_options', ''));
  $options = array_combine($options, $options);
  $form['filters']['square'] = array(
    '#title' => 'Площадь',
    '#type' => 'radios',
    '#options' => $options,
    '#default_value' => $default_params['square'],
    '#ajax' => $ajax,
  );

  /*$options = explode(',', variable_get('custom_a600_count_bedroom_options', ''));
  $options = array_combine($options, $options);
  $bedroom_options['all'] = t('Не важно');
  foreach ($options as &$opt) {
    $bedroom_options[(string) $opt] = (string) $opt;
  }
  $form['filters']['count_bedroom'] = array(
    '#title' => 'Сколько спален?',
    '#type' => 'radios',
    '#options' => $bedroom_options,
    '#default_value' => $default_params['count_bedroom'],
    '#ajax' => $ajax,
  );*/

  $form['filters']['floor_group'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
  );

  $form['filters']['floor_group']['floor'] = array(
    '#title' => 'Сколько этажей?',
    '#type' => 'radios',
    '#options' => array(
      6 => 'Одноэтажный',
      7 => 'Двухэтажный',
    ),
    '#ajax' => $ajax,
    '#default_value' => $default_params['floor'],
  );

  $form['filters']['floor_group']['attic_floor'] = array(
    '#title' => 'Мансардный этаж',
    '#type' => 'checkbox',
    '#ajax' => $ajax,
    '#default_value' => $default_params['attic_floor'],
  );

  $form['filters']['floor_group']['house_basement'] = array(
    '#title' => 'Подвал',
    '#type' => 'checkbox',
    '#ajax' => $ajax,
    '#default_value' => $default_params['house_basement'],
  );

  $form['filters']['dimensions_group'] = array(
    '#type' => 'fieldset',
    '#title' => 'Габариты дома',
    '#collapsible' => FALSE,
  );

  $form['filters']['dimensions_group']['length'] = array(
    '#title' => 'H',
    '#type' => 'slider',
    '#slider_style' => 'orange',
    '#input_title' => '',
    '#input2_title' => '',
    '#max' => 20,
    '#min' => 5,
    '#range' => TRUE,
    '#step' => 1,
    '#default_value' => $default_params['length'],
    '#display_values' => TRUE,
    '#display_values_format' => '%{value}%',
    '#display_inputs' => FALSE,
    '#ajax' => $ajax,
  );

  $form['filters']['dimensions_group']['width'] = array(
    '#title' => 'W',
    '#type' => 'slider',
    '#slider_style' => 'orange',
    '#input_title' => '',
    '#input2_title' => '',
    '#max' => 20,
    '#min' => 5,
    '#range' => TRUE,
    '#step' => 1,
    '#default_value' => $default_params['width'],
    '#display_values' => TRUE,
    '#display_values_format' => '%{value}%',
    '#display_inputs' => FALSE,
    '#ajax' => $ajax,
  );

  $form['filters']['dimensions_group']['all_dimensions'] = array(
    '#title' => 'Не важно',
    '#type' => 'checkbox',
    '#ajax' => $ajax,
    '#default_value' => $default_params['all_dimensions'],
  );

  $form['filters']['price_slider'] = array(
    '#title' => 'Цена',
    '#type' => 'slider',
    '#slider_style' => 'orange',
    '#input_title' => '',
    '#input2_title' => '',
    '#max' => 150000,
    '#min' => 10000,
    '#range' => TRUE,
    '#step' => 10000,
    '#default_value' => $default_params['price_slider'],
    '#display_values' => TRUE,
    '#display_values_format' => '%{value}%',
    '#display_inputs' => FALSE,
    '#ajax' => $ajax,
  );


  $form['bottom_triangle'] = array(
    '#markup' => '<div class="bottom-triangle-wrapper"><div class="bottom-triangle">&nbsp;</div></div>',
  );

  $form['filters']['extra_filters'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => 'Расширенный поиск',
  );

  $form['filters']['extra_filters']['second_light'] = array(
    '#title' => 'Второй свет',
    '#type' => 'radios',
    '#options' => array(
      1 => 'Нужен',
      0 => 'Не нужен',
      'all' => 'Все равно',
    ),
    '#default_value' => $default_params['second_light'],
    '#ajax' => $ajax,
  );

  $form['filters']['extra_filters']['garage'] = array(
    '#title' => 'Гараж нужен?',
    '#type' => 'radios',
    '#options' => array(
      22 => 'Обязательно',
      'all' => 'Не очень',
    ),
    '#default_value' => $default_params['garage'],
    '#ajax' => $ajax,
  );

  $form['filters']['extra_filters']['balcony'] = array(
    '#title' => 'Балкон нужен',
    '#type' => 'radios',
    '#options' => array(
      1 => 'Да, очень',
      0 => 'Нет',
      'all' => 'Все равно',
    ),
    '#default_value' => $default_params['balcony'],
    '#ajax' => $ajax,
  );

  $form['filters']['extra_filters']['terrace'] = array(
    '#title' => 'Терраса есть?',
    '#type' => 'radios',
    '#options' => array(
      1 => 'Да',
      0 => 'Нет',
      'all' => 'Не знаю',
    ),
    '#default_value' => $default_params['terrace'],
    '#ajax' => $ajax,
  );

  $form['filters']['extra_filters']['erker'] = array(
    '#title' => 'Эркер нужен?',
    '#type' => 'radios',
    '#options' => array(
      1 => 'Да',
      0 => 'Нет',
      'all' => 'Не знаю',
    ),
    '#default_value' => $default_params['erker'],
    '#ajax' => $ajax,
  );

  $form['filters']['extra_filters']['count_bedroom_group'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
  );

  $form['filters']['extra_filters']['count_bedroom_group']['count_bedroom_floor1'] = array(
    '#title' => 'Сколько спален на первом этаже?',
    '#type' => 'textfield',
    '#size' => 3,
    '#ajax' => $ajax,
    '#default_value' => $default_params['count_bedroom_floor1'],
  );
  $form['filters']['extra_filters']['count_bedroom_group']['count_bedroom_floor2'] = array(
    '#title' => 'Сколько спален на втором этаже?',
    '#type' => 'textfield',
    '#size' => 3,
    '#ajax' => $ajax,
    '#default_value' => $default_params['count_bedroom_floor2'],
  );

  $form['filters']['extra_filters']['pool'] = array(
    '#title' => 'Может быть бассейн?',
    '#type' => 'radios',
    '#options' => array(
      1 => 'Да',
      0 => 'Нет',
      'all' => 'Не уверен',
    ),
    '#default_value' => $default_params['pool'],
    '#ajax' => $ajax,
  );

  $form['results-wrapper'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#attributes' => array('id' => array('results-wrapper')),
  );

  $form['results-wrapper']['results'] = array(
    '#markup' => _custom_a600_find_projects($default_params),
  );

  $form['results-wrapper']['count_projects'] = array(
    '#type' => 'hidden',
    '#value' => $default_params['count_projects'],
  );
  $form['results-wrapper']['count_search'] = array(
    '#type' => 'hidden',
    '#value' => $default_params['count_search'],
  );
  $form['results-wrapper']['page'] = array(
    '#type' => 'hidden',
    '#value' => $default_params['page'],
  );

  $more_href = 'house_projects/search/' . urlencode(serialize($default_params));
  $form['results-wrapper']['more_text'] = array(
    '#markup' => '<div class ="more-wrapper"><a id="load-more-link" href="' . $more_href . '"> Загрузить ещё </a></div>',
  );

  return $form;
}

function _custom_a600_search_projects_ajax($form, &$form_state) {
  $form['results-wrapper'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#attributes' => array('id' => array('results-wrapper')),
  );
  $form_state['values']['page'] = 0;
  $form_state['values']['count_search'] = 0;
  $form_state['values']['count_projects'] = 0;
  $form['results-wrapper']['results'] = array(
    '#markup' => _custom_a600_find_projects($form_state['values']),
  );
  if ($form_state['values']['count_projects'] >= $form_state['values']['count_search']) {
    $more_href = 'house_projects/search/' . urlencode(serialize($form_state['values']));
    $form['results-wrapper']['more_text'] = array(
      '#markup' => '<div class ="more-wrapper"><a id="load-more-link" href="' . $more_href . '"> Загрузить ещё </a></div>',
    );
  }
  return $form['results-wrapper'];
}

function _custom_a600_search_projects_append_ajax($params) {
  $params = urldecode($params);
  $params = unserialize($params);
  $results = _custom_a600_find_projects($params);
  if ($params['count_projects'] >= $params['count_search']) {
    $more_href = 'house_projects/search/' . urlencode(serialize($params));
    $results .= '<div class ="more-wrapper"><a id="load-more-link" href="' . $more_href . '"> Загрузить ещё </a></div>';
  }
  drupal_json_output($results);
}

/*
 * Find and render house projects by params
 *
 *  @param $params array
 *   Search params
 *   - 'width': project width. Array ('value', 'value2')
 *   - 'length': project length. Array ('value', 'value2')
 *   - 'all_dimensions': Flag for ignore dimensions params)width and length)
 *   - 'floor': Count of floors (taxonomy)
 *   - 'attic_floor': Attic floor (bool)
 *   - 'house_basement': House basement (bool)
 *   - 'price_slider': project price. Array ('value', 'value2')
 *   - 'second_light': Second light (bool or all)
 *   - 'balcony': balcony (bool or all)
 *   - 'terrace': terrace (bool or all)
 *   - 'erker': erker (bool or all)
 *   - 'pool': pool (bool or all)
 *   - 'count_bedroom_floor1': Bedrooms on floor1 (int or all)
 *   - 'count_bedroom_floor2': Bedrooms on floor2 (int or all)
 *   - 'page': search page (int)
 *   - 'count_search': count searched (offset) (int)
 *   - 'count_projects': projects count all (int)
 *
 *  @return
 *   Markup of search results
 */
function _custom_a600_find_projects(&$params = NULL) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'house_project')
    ->propertyCondition('status', 1);

  /*if (isset($params['count_bedroom']) && $params['count_bedroom'] != 'all') {
    $query->fieldCondition('field_count_bedroom', 'value', $params['count_bedroom'], '=');
  }*/
  if (isset($params['square'])) {
    $values = explode('-', $params['square']);
    $query->fieldCondition('field_square', 'value', $values[0], '>=');
    $query->fieldCondition('field_square', 'value', $values[1], '<=');
  }
  if ($params['all_dimensions'] != TRUE) {
    if (isset($params['width'])) {
      $query->fieldCondition('field_width', 'value', $params['width']['value'],  '>=');
      $query->fieldCondition('field_width', 'value', $params['width']['value2'], '<=');
    }
    if (isset($params['length'])) {
      $query->fieldCondition('field_length', 'value', $params['length']['value'],  '>=');
      $query->fieldCondition('field_length', 'value', $params['length']['value2'], '<=');
    }
  }

  if (isset($params['floor'])) {
    // hardcoded floor option
    if ($params['floor'] == 6) {
      $query->fieldCondition('field_house_floors', 'tid', $params['floor'], '=');
    }
    else {
      $query->fieldCondition('field_house_floors', 'tid', 6, '!=');
    }
  }
  if (isset($params['attic_floor']) && $params['attic_floor'] != FALSE) {
    $query->fieldCondition('field_attic_floor ', 'value', TRUE);
  }
  if (isset($params['house_basement']) && $params['house_basement'] != FALSE) {
    $query->fieldCondition('field_house_basement ', 'value', TRUE);
  }
  if (isset($params['price_slider'])) {
    $query->fieldCondition('field_price', 'value', $params['price_slider']['value'],  '>=');
    $query->fieldCondition('field_price', 'value', $params['price_slider']['value2'], '<=');
  }
  if (isset($params['garage']) && $params['garage'] != 'all') {
    $query->fieldCondition('field_house_garage', 'tid', $params['garage'], '=');
  }
  if (isset($params['second_light']) && $params['second_light'] != 'all') {
    $query->fieldCondition('field_second_light', 'value', $params['second_light'], '=');
  }
  if (isset($params['balcony']) && $params['balcony'] != 'all') {
    $query->fieldCondition('field_balcony', 'value', $params['balcony'], '=');
  }
  if (isset($params['terrace']) && $params['terrace'] != 'all') {
    $query->fieldCondition('field_terrace', 'value', $params['terrace'], '=');
  }
  if (isset($params['erker']) && $params['erker'] != 'all') {
    $query->fieldCondition('field_erker', 'value', $params['erker'], '=');
  }
  if (isset($params['pool']) && $params['pool'] != 'all') {
    $query->fieldCondition('field_pool', 'value', $params['pool'], '=');
  }

  //todo add count bedrooms handler

  // ищем спец спрецпредложение
  $query_spec_offer = clone $query;
  $query_spec_offer->fieldCondition('field_special_offer ', 'value', 1);
  $query_spec_offer->range($params['page'], 1);
  $result_spec_offer = $query_spec_offer->execute();
  $spec_offer_nid = FALSE;
  if (isset($result_spec_offer['node'])) {
    $nids = array_keys($result_spec_offer['node']);
    $spec_offer_nid = array_shift($nids);
  }
  if ($spec_offer_nid) {
    $so_offset = 2;
  }
  else {
    $so_offset = 0;
  }

  $start = $params['count_search'];
  // не включаем спец предложеия, по ним отдельный поиск
  $query->fieldCondition('field_special_offer ', 'value', 1, '!=');
  // после пятой странциы текстовых блоков нет, так что надо показывать на 2 проекта больше
  if ($params['page'] > 4) {
    $text_offset = 2;
  }
  else {
    $text_offset = 0;
  }
  // считаем один раз количество проектов по запросу
  if (!isset($params['count_projects']) || $params['count_projects'] == FALSE) {
    $query_count = clone $query;
    $query_count->count();
    $params['count_projects'] = $query_count->execute();
  }

  $query->range($start, 14 - $so_offset + $text_offset);
  $params['count_search'] += 14 - $so_offset + $text_offset;
  // если у нас последняя страница - скрываем кнопку "Еще"
  if ($params['count_projects'] <= $params['count_search']) {
    drupal_add_js(array('remove_more_text' => TRUE), 'setting');
  }
  else {
    drupal_add_js(array('remove_more_text' => FALSE), 'setting');
  }
  $result = $query->execute();
  $output = '';
  $current_text_block = 1;
  if (isset($result['node'])) {
    $i = 0;
    $nids = array_keys($result['node']);
    foreach ($nids as $nid) {
      $output .= _custom_a600_render_project($nid);
      $i++;
      // выводим тектсовые блоки
      if ($i==2 || $i==10-$so_offset) {
        $block_id = $params['page']*2 + $current_text_block;
        $current_text_block++;
        $block = module_invoke('block', 'block_view', $block_id);
        $output .= '<div class="search-text-block">' . render($block['content']) . '</div>';
      }
      // выводим спец предложение
      if ($i==3 && $spec_offer_nid) {
        $output .= _custom_a600_render_special_offer($spec_offer_nid);
      }
    }
    ++$params['page'];
  }
  else {
    $output = '<div class="search-no-results-block">По вашему запросу не найдено проектов.</div>';
    drupal_add_js(array('remove_more_text' => TRUE), 'setting');
  }

  return $output;
}

function _custom_a600_render_special_offer($nid) {
  $node = node_load($nid);
  $node = node_view($node, 'search_result_special_offer');
  return render($node);
}

function _custom_a600_render_project($nid) {
  $node = node_load($nid);
  $node = node_view($node, 'search_result');
  return render($node);
}

/**
 * Implementation of hook_galleryformatter_styles().
 *
 * This hook allows other modules to create additional tab styles for
 * the galleryformatter module.
 *
 * @return array
 *   An array of key => value pairs suitable for inclusion as the #options in a
 *   select or radios form element. Each key must be the location of a css
 *   file for a gallery formatter style. Each value should be the name of the style.
 */
function custom_a600_galleryformatter_styles() {
  $gallerystyles_directory = drupal_get_path('module', 'custom_a600') . '/gallerystyles';
  $files = file_scan_directory($gallerystyles_directory, '/\.css$/');
  $gallerystyles = array();
  foreach ($files as $file) {
    // Skip RTL files.
    if (!strpos($file->name, '-rtl')) {
      $gallerystyles[$file->uri] = drupal_ucfirst($file->name);
    }
  }
  return $gallerystyles;
}

function custom_a600_node_view($node, $view_mode) {
  if ($node->type == 'house_project' && $view_mode == 'full') {
    drupal_set_title('');
  }
}

function custom_a600_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['order'] = array(
    'label' => t('Order'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['search_result_special_offer'] = array(
    'label' => t('Special offer'),
    'custom settings' => TRUE,
  );
}

function custom_a600_project_order_form($form, &$form_state, $nid) {
  drupal_set_title('');

  $node_obj = node_load($nid);
  // todo изменить перед  использованием нескольких цен
  drupal_add_js(array('standard_price' =>  $node_obj->field_price['und'][0]['value']), 'setting');
  drupal_add_js(array('item_price' =>  variable_get('custom_a600_item_price', 500)), 'setting');
  $node = node_view($node_obj, 'order');
  $form['node_info'] = array(
    '#markup' => drupal_render($node)
  );

  $form['prices'] = array(
    '#type' => 'fieldset',
  );
  $form['prices']['standard_price'] = array(
    '#type' => 'fieldset',
  );
  $form['prices']['standard_price']['description'] = array(
    '#prefix' => '<div class="order-option-col1">',
    '#markup' => '<div class="order-option-title">Стандартный пакет документов</div><div class="order-option-description">' . variable_get('custom_a600_standard_price_description', '') . '</div>',
    '#suffix' => '</div>',
  );
  $options = explode(',', variable_get('custom_a600_standard_price_options', ''));
  $output = '';
  foreach ($options as $opt) {
    $output .= ' &mdash; ' . trim($opt) . '<br>';
  }
  $form['prices']['standard_price']['options'] = array(
    '#prefix' => '<div class="order-option-all-options">',
    '#suffix' => '</div>',
    '#markup' => '<div class="order-option-options">' . $output . '</div>',
  );
  $form['prices']['standard_price']['col3'] = array(
    '#type' => 'fieldset',
    '#attributes' => array('class' => array('price-options-col3')),
  );
  $form['prices']['standard_price']['col3']['price'] = array(
    '#prefix' => '<div class="price-wrapper">',
    '#markup' => '<div class="standard-price price">' . $node_obj->field_price['und'][0]['value'] . '</div>',
    '#suffix' => '<div class="price-suffix">&nbsp;</div></div>'
  );
  $form['prices']['standard_price']['col3']['buy-standard'] = array(
    '#prefix' => '<div class="submit-wrapper">',
    '#type' => 'submit',
    '#value' => 'Оплатить',
    '#suffix' => '<div class="create-order-suffix">&nbsp;</div></div>'
  );
  $form['prices']['standard_price']['col3']['count-standard'] = array(
    '#title' => 'Кол-во экземпляров',
    '#type' => 'textfield',
    '#default_value' => 1,
    '#size' => 1,
  );

  if (variable_get('custom_a600_full_price_enabled', FALSE)) {
    $form['prices']['full_price'] = array(
      '#type' => 'fieldset',
    );
    $form['prices']['full_price']['description'] = array(
      '#prefix' => '<div class="order-option-col1">',
      '#markup' => '<div class="order-option-title">Полный пакет документов</div><div class="order-option-description">' . variable_get('custom_a600_full_price_description', '') . '</div>',
      '#suffix' => '</div>',
    );
    $options = explode(',', variable_get('custom_a600_full_price_options', ''));
    $output = '';
    foreach ($options as $opt) {
      $output .= ' &mdash; ' . trim($opt) . '<br>';
    }
    $form['prices']['full_price']['options'] = array(
      '#prefix' => '<div class="order-option-all-options">',
      '#markup' => '<div class="order-option-options">' . $output . '</div>',
    );
    $options = explode(',', variable_get('custom_a600_full_price_additional', ''));
    $output = '';
    foreach ($options as $opt) {
      $output .= ' <div class="additional-option"><div class="additional-option-marker"> &nbsp;</div><div class="additional-option-text">' . trim($opt) . '</div></div>';
    }
    $form['prices']['full_price']['additional'] = array(
      '#markup' => '<div class="order-options-additional">' . $output . '</div>',
      '#suffix' => '</div>',
    );
    $form['prices']['full_price']['col3'] = array(
      '#type' => 'fieldset',
      '#attributes' => array('class' => array('price-options-col3')),
    );
    $form['prices']['full_price']['col3']['price'] = array(
      '#prefix' => '<div class="price-wrapper">',
      '#markup' => '<div class="full-price price">' . $node_obj->field_price_full['und'][0]['value'] . '</div>',
      '#suffix' => '<div class="price-suffix">&nbsp;</div></div>'
    );
    $form['prices']['full_price']['col3']['buy-full'] = array(
      '#prefix' => '<div class="submit-wrapper">',
      '#type' => 'submit',
      '#value' => 'Оплатить',
      '#suffix' => '<div class="create-order-suffix">&nbsp;</div></div>'
    );
    $form['prices']['full_price']['col3']['count-full'] = array(
      '#title' => 'Кол-во экземпляров',
      '#type' => 'textfield',
      '#default_value' => 1,
      '#size' => 1,
    );
  }

  if (variable_get('custom_a600_extended_price_enabled', FALSE)) {
    $form['prices']['extended_price'] = array(
      '#type' => 'fieldset',
    );
    $form['prices']['extended_price']['description'] = array(
      '#prefix' => '<div class="order-option-col1">',
      '#markup' => '<div class="order-option-title">Полный пакет + доработки</div><div class="order-option-description">' . variable_get('custom_a600_extended_price_description', '') . '</div>',
      '#suffix' => '</div>',
    );
    $options = explode(',', variable_get('custom_a600_extended_price_options', ''));
    $output = '';
    foreach ($options as $opt) {
      $output .= ' &mdash; ' . trim($opt) . '<br>';
    }
    $form['prices']['extended_price']['options'] = array(
      '#prefix' => '<div class="order-option-all-options">',
      '#markup' => '<div class="order-option-options">' . $output . '</div>',
    );
    $options = explode(',', variable_get('custom_a600_extended_price_additional', ''));
    $output = '';
    foreach ($options as $opt) {
      $output .= '<div class="additional-option"><div class="additional-option-marker"> &nbsp;</div><div class="additional-option-text">' . trim($opt) . '</div></div>';
    }
    $form['prices']['extended_price']['additional'] = array(
      '#markup' => '<div class="order-options-additional">' . $output . '</div>',
      '#suffix' => '</div>',
    );
    $form['prices']['extended_price']['col3'] = array(
      '#type' => 'fieldset',
      '#attributes' => array('class' => array('price-options-col3')),
    );
    $form['prices']['extended_price']['col3']['price'] = array(
      '#prefix' => '<div class="price-wrapper">',
      '#markup' => '<div class="extended-price price">' . $node_obj->field_price_extended['und'][0]['value'] . '</div>',
      '#suffix' => '<div class="price-suffix">&nbsp;</div></div>'
    );
    $form['prices']['extended_price']['col3']['buy-extended'] = array(
      '#prefix' => '<div class="submit-wrapper">',
      '#type' => 'submit',
      '#value' => 'Оплатить',
      '#suffix' => '<div class="create-order-suffix">&nbsp;</div></div>'
    );
    $form['prices']['extended_price']['col3']['count-extended'] = array(
      '#title' => 'Кол-во экземпляров',
      '#type' => 'textfield',
      '#default_value' => 1,
      '#size' => 1,
    );
  }

  return $form;

}

/**
 * Form callback for the "add favorite form"
 *
 * @see favorites_user_block()
 */
function custom_a600_add_favorite_form($form, &$form_state) {

  $nid = arg(1);
  $node = node_load($nid);
  $title = $node->title;
  drupal_add_js(drupal_get_path('theme', 'a600') . '/js/favorites.js');
  $path = strip_tags($_GET['q']);
  $query = drupal_http_build_query($_GET);

  // Add a collapsible container.
  $form = array(
    'title' => array(
      '#type' => 'hidden',
      '#value' => $title,
      ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => '',
      '#submit' => array('favorites_add_favorite_form_submit'),
    ),
    'path' => array(
      '#type' => 'value',
      '#value' => $path,
    ),
    'query' => array(
      '#type' => 'value',
      '#value' => $query,
    ),
    'uid' => array(
      '#type' => 'value',
      '#value' => 0,
    ),
  );
  //Preserve the current path with query string.
  $form_state['redirect'] = array(
    $_GET['q'],
    array(
      'query' => drupal_http_build_query($_GET),
    )
  );
  // Additionally add path and query to the JS settings.
  drupal_add_js(
    array(
      'favorites' => array(
        'path' => $path,
        'query' => $query,
        'addCallbackPath' => url('favorites/js/add'),
      ),
    ),
    'setting'
  );

  return $form;
}

/**
 * Submit callback for "add favorite" form.
 */
function custom_a600_add_favorite_form_submit($form, &$form_state) {
  favorites_add_favorite($form_state['values']);
}